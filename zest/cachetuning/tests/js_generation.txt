JS library generation
=====================

The Javascript file used by our tool content will depend on the settings of the user.

    >>> self.login_as_manager()
    >>> self.addProduct('zest.cachetuning')

1 - Replace username with Javascript:
-------------------------------------

First, we'll simply disable this option:

    >>> self.browser.open('http://nohost/plone/portal_zestcachetuning/edit')
    >>> self.browser.getControl(name='jq_replace_username:boolean').value = False
    >>> self.browser.getControl(name='form.button.save').click()

It will disable calling the 'replace_fullname' method call:

    >>> self.browser.open('http://nohost/plone/zest.cachetuning.js')
    >>> 'replace_fullname();' in self.browser.contents
    False

If we enable the option again, the method is called:

    >>> self.browser.open('http://nohost/plone/portal_zestcachetuning/edit')
    >>> self.browser.getControl(name='jq_replace_username:boolean').value = True
    >>> self.browser.getControl(name='form.button.save').click()
    >>> self.browser.open('http://nohost/plone/zest.cachetuning.js')
    >>> 'replace_fullname();' in self.browser.contents
    True

We can also specify a custom CSS query to find the username:

    >>> self.browser.open('http://nohost/plone/portal_zestcachetuning/edit')
    >>> self.browser.getControl(name='jq_replace_username_selector').value = '.my_custom_selector'
    >>> self.browser.getControl(name='form.button.save').click()
    >>> self.browser.open('http://nohost/plone/zest.cachetuning.js')
    >>> "var username_holder = $('.my_custom_selector');" in self.browser.contents
    True
